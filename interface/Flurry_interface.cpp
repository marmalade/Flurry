/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "Flurry.h"


#ifndef S3E_EXT_SKIP_LOADER_CALL_LOCK
// For MIPs (and WP8) platform we do not have asm code for stack switching
// implemented. So we make LoaderCallStart call manually to set GlobalLock
#if defined __mips || defined S3E_ANDROID_X86 || (defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP))
#define LOADER_CALL_LOCK
#endif
#endif

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef       void(*s3eFlurryStartSession_t)(const char* apiKey);
typedef       void(*s3eFlurryEndSession_t)();
typedef       void(*s3eFlurryLogEvent_t)(const char* eventName);
typedef       void(*s3eFlurryLogEventTimed_t)(const char* eventName);
typedef       void(*s3eFlurryLogEventParams_t)(const char* eventName, const char* eventParams);
typedef       void(*s3eFlurryLogEventParamsTimed_t)(const char* eventName, const char* eventParams);
typedef       void(*s3eFlurryEndTimedEvent_t)(const char* eventName, const char* eventParams);
typedef       void(*s3eFlurryLogError_t)(const char* errorName, const char* message);
typedef       void(*s3eFlurrySetUserID_t)(const char* userId);
typedef       void(*s3eFlurrySetAge_t)(int32 age);
typedef       void(*s3eFlurryCountPageView_t)();
typedef       void(*s3eFlurrySetSessionReportsOnCloseEnabled_t)(s3eBool sendSessionReportsOnClose);
typedef       void(*s3eFlurrySetSessionReportsOnPauseEnabled_t)(s3eBool sendSessionReportsOnPause);

/**
 * struct that gets filled in by FlurryRegister
 */
typedef struct FlurryFuncs
{
    s3eFlurryStartSession_t m_s3eFlurryStartSession;
    s3eFlurryEndSession_t m_s3eFlurryEndSession;
    s3eFlurryLogEvent_t m_s3eFlurryLogEvent;
    s3eFlurryLogEventTimed_t m_s3eFlurryLogEventTimed;
    s3eFlurryLogEventParams_t m_s3eFlurryLogEventParams;
    s3eFlurryLogEventParamsTimed_t m_s3eFlurryLogEventParamsTimed;
    s3eFlurryEndTimedEvent_t m_s3eFlurryEndTimedEvent;
    s3eFlurryLogError_t m_s3eFlurryLogError;
    s3eFlurrySetUserID_t m_s3eFlurrySetUserID;
    s3eFlurrySetAge_t m_s3eFlurrySetAge;
    s3eFlurryCountPageView_t m_s3eFlurryCountPageView;
    s3eFlurrySetSessionReportsOnCloseEnabled_t m_s3eFlurrySetSessionReportsOnCloseEnabled;
    s3eFlurrySetSessionReportsOnPauseEnabled_t m_s3eFlurrySetSessionReportsOnPauseEnabled;
} FlurryFuncs;

static FlurryFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0xfdb1a7c9, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: Flurry");

        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0xfdb1a7c9, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool FlurryAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

void s3eFlurryStartSession(const char* apiKey)
{
    IwTrace(FLURRY_VERBOSE, ("calling Flurry[0] func: s3eFlurryStartSession"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eFlurryStartSession(apiKey);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eFlurryEndSession()
{
    IwTrace(FLURRY_VERBOSE, ("calling Flurry[1] func: s3eFlurryEndSession"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eFlurryEndSession();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eFlurryLogEvent(const char* eventName)
{
    IwTrace(FLURRY_VERBOSE, ("calling Flurry[2] func: s3eFlurryLogEvent"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eFlurryLogEvent(eventName);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eFlurryLogEventTimed(const char* eventName)
{
    IwTrace(FLURRY_VERBOSE, ("calling Flurry[3] func: s3eFlurryLogEventTimed"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eFlurryLogEventTimed(eventName);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eFlurryLogEventParams(const char* eventName, const char* eventParams)
{
    IwTrace(FLURRY_VERBOSE, ("calling Flurry[4] func: s3eFlurryLogEventParams"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eFlurryLogEventParams(eventName, eventParams);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eFlurryLogEventParamsTimed(const char* eventName, const char* eventParams)
{
    IwTrace(FLURRY_VERBOSE, ("calling Flurry[5] func: s3eFlurryLogEventParamsTimed"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eFlurryLogEventParamsTimed(eventName, eventParams);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eFlurryEndTimedEvent(const char* eventName, const char* eventParams)
{
    IwTrace(FLURRY_VERBOSE, ("calling Flurry[6] func: s3eFlurryEndTimedEvent"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eFlurryEndTimedEvent(eventName, eventParams);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eFlurryLogError(const char* errorName, const char* message)
{
    IwTrace(FLURRY_VERBOSE, ("calling Flurry[7] func: s3eFlurryLogError"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eFlurryLogError(errorName, message);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eFlurrySetUserID(const char* userId)
{
    IwTrace(FLURRY_VERBOSE, ("calling Flurry[8] func: s3eFlurrySetUserID"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eFlurrySetUserID(userId);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eFlurrySetAge(int32 age)
{
    IwTrace(FLURRY_VERBOSE, ("calling Flurry[9] func: s3eFlurrySetAge"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eFlurrySetAge(age);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eFlurryCountPageView()
{
    IwTrace(FLURRY_VERBOSE, ("calling Flurry[10] func: s3eFlurryCountPageView"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eFlurryCountPageView();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eFlurrySetSessionReportsOnCloseEnabled(s3eBool sendSessionReportsOnClose)
{
    IwTrace(FLURRY_VERBOSE, ("calling Flurry[11] func: s3eFlurrySetSessionReportsOnCloseEnabled"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eFlurrySetSessionReportsOnCloseEnabled(sendSessionReportsOnClose);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eFlurrySetSessionReportsOnPauseEnabled(s3eBool sendSessionReportsOnPause)
{
    IwTrace(FLURRY_VERBOSE, ("calling Flurry[12] func: s3eFlurrySetSessionReportsOnPauseEnabled"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eFlurrySetSessionReportsOnPauseEnabled(sendSessionReportsOnPause);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}
